@page "/cart"
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject ICardService _cardService
@inject IJSRuntime _jsRuntime

@if (IsProcessing)
{


	<div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
		<img src="images/ajax-loader.gif" />
	</div>
}
else
{
	@if (!ShoppingCart.Any())
	{
		<div>
			Please add item to Shopping cart
		</div>
	}
	else
	{
		<div class="container mt-4">
			<div class="card">
				<div class="card-header bg-dark text-light ml-0 ">
					<div class="row">
						<div class="col-6  pt-2">
							Shopping Cart
						</div>
						<div class="col-6 col-md-3 offset-md-3 text-end">
							<a href="/" class="btn btn-outline-info form-control">Continue Shopping</a>
						</div>
					</div>
				</div>
				<div class="card-body">
					@foreach(var item in ShoppingCart)
					{				
				
					<div class="row">
						<div class="col-3 col-md-1 text-center py-2">
							<img src="@item.Product.ImageUrl" class="rounded" width="100%" />
						</div>
						<div class="col-9 text-sm-center text-md-start col-md-4 pt-lg-1 ">
							<h4><strong>@item.Product.Name</strong></h4>

							<div class="badge bg-primary text-center" style="font-size:12px;">
								@item.Product.Category.Name
							</div>
							<div class="badge bg-info text-center" style="font-size:12px;">
								@item.Product.Color
							</div>
							<div><p>Display Size : @item.ProductPrice.DisplaySize</p></div>
						</div>
						<div class="col-12 text-sm-center col-md-7 text-md-start row  pt-lg-3 mt-3">
							<div class="col-4 pt-1 ">

								<h6><strong>@item.ProductPrice.Price.ToString("c") <span class="text-muted">x</span> @item.Count </strong></h6>
							</div>
							<div class="col-6 col-sm-4 col-lg-6">
								<button @onclick="() => Increment(item.ProductId, item.ProductPriceId, 1)" type="submit" class="btn btn-primary">
									<i class="bi bi-plus-square"></i>
								</button>

								<button @onclick="() => Decrement(item.ProductId, item.ProductPriceId, 1)" type="submit" class="btn btn-warning">
									<i class="bi bi-dash-square"></i>
								</button>

							</div>
							<div class="col-2 col-sm-4 col-lg-2 text-right">
								<button @onclick="() => Decrement(item.ProductId, item.ProductPriceId, 0)"  type="submit" class="btn btn-outline-danger">
									<i class="bi bi-trash-fill"></i>
								</button>
							</div>
						</div>
					</div>
						}
					<hr />

					<div class="row">
						<div class="col-12 col-md-5">
						</div>
						<div class="col-12 col-md-6 offset-md-1 col-lg-4 offset-lg-3 pr-4">
							<ul class="list-group">
								<li class="list-group-item d-flex justify-content-between bg-light">
									<span class="text-info"> Total (USD)</span>
									<strong class="text-info">@OrderTotal.ToString("c")</strong>
								</li>
							</ul>
						</div>
					</div>


				</div>
				<div class="card-footer">
					<div class="col-12  col-md-3 offset-md-9">
						<a href="/summary" class="btn btn-secondary form-control">Summary</a>
					</div>
				</div>
			</div>
		</div>

	}
}


@code {
	public bool IsProcessing { get; set; } = false;
	private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
	private IEnumerable<ProductDTO> Products { get; set; }
	private double OrderTotal { get; set; } = 0;
	protected override async Task OnInitializedAsync()
	{
		IsProcessing = true;
		ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
		Products = await _productService.GetAll();
		await LoadCart();
		IsProcessing = false;
	}

	private async Task LoadCart()
	{
		OrderTotal = 0;
		ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
		foreach (var cart in ShoppingCart)
		{
			cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
			cart.ProductPrice = cart.Product.ProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
			OrderTotal += (cart.ProductPrice.Price * cart.Count);
		}
	}
	private async Task Increment(int ProductId, int ProductPriceId, int Count)
	{
		IsProcessing = true;
		await _cardService.IncrementCart(new()
		{
			Count=Count,
			ProductId = ProductId,
			ProductPriceId = ProductPriceId
		});
		await LoadCart();
		IsProcessing = false;
	}
	private async Task Decrement(int ProductId, int ProductPriceId, int Count)
	{
		IsProcessing = true;
		await _cardService.DecrementCart(new()
		{
			Count=Count,
			ProductId = ProductId,
			ProductPriceId = ProductPriceId
		});
		await LoadCart();
		IsProcessing = false;
	}
}
