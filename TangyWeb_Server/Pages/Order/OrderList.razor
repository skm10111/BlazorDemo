@page "/orderList"
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]
<div>
	<h4 class="card-title text-info">Order's List</h4>
    @if(OrderHeaders.Any()){
   
	 <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="Radzen.HorizontalAlign.Left" ShowPagingSummary="true"
        Data="OrderHeaders" TItem="OrderHeaderDTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" />
          
            <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Name" Title="Name" Frozen="true" Width="160px" />         
              <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="PhoneNumber" Title="Phone Number"  Width="160px" />    
			  <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Email" Title="Email" Width="160px" />   
			   <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Status" Title="Status" Width="160px" />   
			  <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderTotal" Title="Order Total" Width="160px" />   
            <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
            
        <RadzenDataGridColumn TItem="OrderHeaderDTO" Title="Details" >
                <Template Context="data">
					<RadzenButton Click="(args => OrderDetails(data.Id))" Text="Details" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
        </RadzenDataGrid>
    }
    else
    {
       
			@if (IsLoading)
			{
				<div class="text-center ">
					<img src="/images/loading.gif" />
				</div>

			}	
		
    }
</div>

@code {
	private IEnumerable<OrderHeaderDTO> OrderHeaders { get; set; } = new List<OrderHeaderDTO>();
	private bool IsLoading { get; set; } = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadOrders();
		}
	}
	private async Task LoadOrders()
	{
		IsLoading = true;
		StateHasChanged();
		var orders = await _orderRepository.GetAll();
		OrderHeaders = orders.Select(u => u.OrderHeader);
		IsLoading = false;
		StateHasChanged();
	}
	private void OrderDetails(int id)
	{
		_navigationManager.NavigateTo("/order/details/"+ id);
	}
}
