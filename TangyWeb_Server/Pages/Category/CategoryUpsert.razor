@page "/category/create"
@page "/category/edit/{id:int}"

@inject IJSRuntime _JsRuntime
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]


<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>
	<div class="col-10">
		@if (IsLoading)
		{
			<div class="text-center ">
				<img src="/images/loading.gif" />
			</div>
		}
		else
		{
			<EditForm Model="Category" OnValidSubmit="UpsertCategory">
				<DataAnnotationsValidator />
				@*		<ValidationSummary />		*@
				<div class="form-group">
					<label>Name</label>
					<InputText @bind-Value="Category.Name" class="form-control"></InputText>
					<ValidationMessage For="() =>Category.Name "></ValidationMessage>
				</div>
				<div class="form-group py-2">
					<button class="btn btn-primary">@Title</button>
					<NavLink href="category" class="btn btn-secondary">
						Back to Index
					</NavLink>
				</div>
			</EditForm>
		}

	</div>
</div>

@code {
	[Parameter]
	public int Id { get; set; }
	private CategoryDTO Category { get; set; } = new CategoryDTO();
	private string Title { get; set; } = "Create";
	private async void UpsertCategory()
	{
		if (Id == 0)
		{
			_categoryRepository.Create(Category);
			await _JsRuntime.ToastrSuccess("Added Successfully");
		}
		else
		{
			_categoryRepository.Update(Category);
			await _JsRuntime.ToastrSuccess("Updated Successfully");
		}
		_navigationManager.NavigateTo("category");
	}
	private bool IsLoading { get; set; }
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{

			if (Id == 0)
			{
				IsLoading = false;
			}
			else
			{

				Title = "Update";

				LoadCategorie();


			}
		}
	}

	//protected override async Task OnInitializedAsync()
	//{
	//	if (Id == 0)
	//	{
	//		IsLoading = false;
	//	}
	//	else
	//	{
	//		Title = "Update";
	//		await Task.Run(LoadCategorie);
	//	}

	//}
	private async void LoadCategorie()
	{
		IsLoading = true;
		StateHasChanged();
		Category = await _categoryRepository.Get(Id);
		IsLoading = false;
			StateHasChanged();
	}
}
