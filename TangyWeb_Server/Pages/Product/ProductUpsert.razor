@page "/products/create"
@page "/products/edit/{id:int}"


@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@attribute [Authorize]


<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>
	<div class="col-md-10">
		@if (IsLoading)
		{
			<div class="text-center ">
				<img src="/images/loading.gif" />
			</div>
		}
		else
		{
			<EditForm Model="Product" OnValidSubmit="UpsertProduct">
				<DataAnnotationsValidator />
				@*		<ValidationSummary />		*@
				<div class="form-group">
					<label>Name</label>
					<InputText @bind-Value="Product.Name" class="form-control"></InputText>
					<ValidationMessage For="() =>Product.Name "></ValidationMessage>
				</div>
				<div class="form-group">
					<label>Color</label>
					<InputText @bind-Value="Product.Color" class="form-control"></InputText>
					<ValidationMessage For="() =>Product.Color "></ValidationMessage>
				</div>
				<div class="form-group">
					<label>Description</label>					
					<SfRichTextEditor @bind-Value="Product.Description" ></SfRichTextEditor>
					<ValidationMessage For="() =>Product.Description "></ValidationMessage>
				</div>

				<div class="row pt-3">
					<div class="form-group col-6">
						<div class="form-check">
							<InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
							<label class="col-form-label">Is Shop Favorites</label>
						</div>
					</div>
					<div class="form-group col-6">
						<div class="form-check">
							<InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
							<label class="col-form-label">Is Customer Favorites</label>
						</div>
					</div>


					<div class="form-group col-6">
						<label>Category</label>
						<InputSelect @bind-Value="Product.CategoryId" class="form-select">
							<option value="0" disabled="disabled" selected>--Select Category--</option>
							@foreach (var cat in Categorys)
							{
							<option value=@cat.Id>@cat.Name</option>
							}
					</InputSelect>
					<ValidationMessage For="() =>Product.CategoryId "></ValidationMessage>
				</div>
				<div class="form-group col-6">
					<InputFile OnChange="HandleImageUpload"></InputFile>
				</div>

			</div>

			<div class="form-group py-2">
				<button class="btn btn-primary">@Title</button>
				<NavLink href="product" class="btn btn-secondary">
					Back to Index
				</NavLink>
			</div>
		</EditForm>
		}

	</div>
	<div class="col-md-2 pt-4">
		<img src="@Product.ImageUrl" class="w-100" />
	</div>
</div>

@code {
	[Parameter]
	public int Id { get; set; }
	private ProductDTO Product { get; set; } = new()
		{
			ImageUrl = "/images/default.png"
		};
	private IEnumerable<CategoryDTO> Categorys { get; set; } = new List<CategoryDTO>();
	private bool IsLoading { get; set; }
	private string Title { get; set; } = "Create";
	public string OldImageUrl { get; set; }
	public string ChangeImage { get; set; }

	private async void UpsertProduct()
	{
		if (Id == 0)
		{
			await _productRepository.Create(Product);
			await _jsRuntime.ToastrSuccess("Added Successfully");
		}
		else
		{
			if (OldImageUrl != Product.ImageUrl)
			{
				_fileUpload.DeleteFile(OldImageUrl);
			}
			await _productRepository.Update(Product);
			await _jsRuntime.ToastrSuccess("Updated Successfully");
		}
		_navigationManager.NavigateTo("product");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			LoadProduct();
		}
	}

	private async void LoadProduct()
	{
		IsLoading = true;
		StateHasChanged();
		Categorys = await _categoryRepository.GetAll();
		if (Id != 0)
		{
			Title = "Update";
			Product = await _productRepository.Get(Id);
			OldImageUrl = Product.ImageUrl;
		}
		IsLoading = false;
		StateHasChanged();
	}
	private async Task HandleImageUpload(InputFileChangeEventArgs e)
	{
		IsLoading = true;
		try
		{
			if (e.GetMultipleFiles().Count > 0)
			{
				foreach (var file in e.GetMultipleFiles())
				{
					System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
					if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
					{
						if (!string.IsNullOrEmpty(ChangeImage))
						{
							_fileUpload.DeleteFile(ChangeImage);
						}
						Product.ImageUrl = await _fileUpload.UploadFile(file);
						ChangeImage = Product.ImageUrl;
					}
					else
					{
						await _jsRuntime.ToastrError("Plese select .jpg/ .jpeg/ .png file only");
						return;
					}
				}
			}
			IsLoading = false;
		}
		catch (Exception ex)
		{
			await _jsRuntime.ToastrError(ex.Message);
		}
	}

}
